generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  cartItems     CartItem[]
  orders        Order[]
  review        Review[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model OrderItem {
  id         String   @id @default(cuid())
  productId  String
  quantity   Int
  orderId    String
  order      Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Order {
  id            String      @id @default(cuid())
  createdAt     DateTime    @default(now())
  customerId    String
  customer      User        @relation(fields: [customerId], references: [id], onDelete: Cascade)
  items         OrderItem[]
}

model Review {
  id         String   @id @default(cuid())
  productId  String
  comment    String
  createdAt  DateTime @default(now())
  reviewerId String
  score      Int
  reviewer   User     @relation(fields: [reviewerId], references: [id], onDelete: Cascade)
}

model CartItem {
  id        String @id @default(cuid())
  productId String
  quantity  Int
  shopperId String
  shopper   User   @relation(fields: [shopperId], references: [id], onDelete: Cascade)

  @@unique([shopperId, productId])
}